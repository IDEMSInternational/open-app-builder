# Manually trigger an android build and deploy to Appetize.io

name: Test Appetize
concurrency:
  group: test-appetize-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  pull_request:
    types: [labeled, synchronize]
    branches:
      - deployment/*
      - master
jobs:
  build:
    if: contains(github.event.pull_request.labels.*.name, 'Test - appetize')
    uses: ./.github/workflows/android-build.yml
    secrets: inherit
    with:
      # use branch name from PR target as default
      # https://docs.github.com/en/actions/learn-github-actions/variables#default-environment-variables
      deployment: ${{ github.base_ref }} 
      debug-apk: true
      release-bundle: false
   
  test_appetize:
    needs: build
    runs-on: ubuntu-latest
    # Use deployment-dependent environment which populates appetize secrets accordingly
    environment: 
      name: ${{ needs.build.outputs.DEPLOYMENT_NAME }}
    env:
      DEPLOYMENT_NAME: ${{ needs.build.outputs.DEPLOYMENT_NAME }}
    steps:
      - name: Download Build Artifact
        id: download
        uses: actions/download-artifact@v3
        with:
          name: debug_apk
          path: ./
      - name: Upload to Appetize.io
        id: upload
        uses: maxep/appetize-upload-action@0.1.0
        with:
          api-token: ${{ secrets.APPETIZE_TOKEN }}
          file-path: ${{ steps.download.outputs.download-path }}/app-debug.apk
          platform: "android"
          timeout: 30
          # Include to overwrite existing app instead of creating new (will only allow single build at a time)
          public-key: ${{secrets.APPETIZE_APP_KEY}}
      - name: "Post to PR"
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          message: |
            **Android Appetize URL**
            ${{ steps.upload.outputs.APPETIZE_APP_URL }}?device=pixel4&osVersion=12.0&scale=75
