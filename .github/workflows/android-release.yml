on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
      
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12.x]

    steps:
      - uses: actions/checkout@v1
        with:
          lfs: true
      - name: Checkout LFS objects
        run: git lfs checkout
      - name: Cache node modules
        uses: actions/cache@v1
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Node ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Get Package version
        id: package-version
        uses: martinbeentjes/npm-get-version-action@master
      - name: Install Tree
        run: sudo apt-get install tree
      - name: Populate firebaseConfig.ts
        env: 
          FIREBASE_CONFIG_TS: ${{ secrets.FIREBASE_CONFIG_TS }}
        run: echo $FIREBASE_CONFIG_TS > src/environments/firebaseConfig.ts
      - name: Populate google-services.json
        env:
          GOOGLE_SERVICES_JSON: ${{ secrets.GOOGLE_SERVICES_JSON }}
        run: echo $GOOGLE_SERVICES_JSON > android/app/google-services.json
      - name: npm install
        run: npm install
      - name: npm run build
        run: npm run build
      - name: npx cap sync
        run: npx cap sync
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Setup Android SDK
        uses: android-actions/setup-android@v2
      - name: Assemble Android APK's
        working-directory: android
        run: ./gradlew assemble
      - name: Create Android Bundle
        working-directory: android
        run: ./gradlew bundle
      - name: Tree Android
        run: tree -a ./android
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: Release generated by Github action
          draft: false
          prerelease: false
      - name: Sign Android Release
        id: sign_aab
        uses: r0adkll/sign-android-release@v1
        with:
          releaseDirectory: ./android/app/build/outputs/bundle/release
          signingKeyBase64: ${{ secrets.SIGNING_KEY }}
          alias: ${{ secrets.ALIAS }}
          keyStorePassword: ${{ secrets.KEY_STORE_PASSWORD }}
          keyPassword: ${{ secrets.KEY_PASSWORD }}
      - name: Echo that file
        run: echo $SIGNED_RELEASE_FILE
      - name: Upload Signed App Bundle
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: android/app/build/outputs/bundle/release/app-release.aab
          asset_name: app-release.aab
          asset_content_type: application/zip
      - name: Upload Debug APK
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./android/app/build/outputs/apk/debug/app-debug.apk
          asset_name: app-debug.apk
          asset_content_type: application/zip
