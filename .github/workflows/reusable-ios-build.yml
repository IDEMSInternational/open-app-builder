##################################################################################
#         About
##################################################################################
# Reuseable workflow to be called from content repos.
# Build and deploy app bundle for ios
#
#         Version : 1.1
#
##################################################################################
#         Configuration
##################################################################################
env:
  DEPLOYMENT_NAME: ${{vars.DEPLOYMENT_NAME}}
  DEPLOYMENT_PRIVATE_KEY: ${{secrets.DEPLOYMENT_PRIVATE_KEY}}
  APP_CODE_BRANCH: ${{vars.APP_CODE_BRANCH}}
  PARENT_DEPLOYMENT_REPO: ${{vars.PARENT_DEPLOYMENT_REPO}}
  PARENT_DEPLOYMENT_NAME: ${{vars.PARENT_DEPLOYMENT_NAME}}
  PARENT_DEPLOYMENT_BRANCH: ${{vars.PARENT_DEPLOYMENT_BRANCH}}

  GOOGLE_SERVICES_JSON: ${{secrets.GOOGLE_SERVICES_JSON}}

  IOS_CODE_SIGNING_IDENTITY: ${{ secrets.IOS_CODE_SIGNING_IDENTITY }}
  IOS_TEAM_ID: ${{ secrets.IOS_TEAM_ID }}

  IOS_MOBILEPROVISION_BASE64: ${{secrets.IOS_MOBILEPROVISION_BASE64}}
  IOS_P12_BASE64: ${{secrets.IOS_P12_BASE64}}

  ##################################################################################
  #         Main Code
  ##################################################################################
name:
  IOS Build

  # Only keep one active build per ref (e.g. pr branch, push branch, triggering workflow ref)
concurrency:
  group: ios-build-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  workflow_call:
    inputs:
      branch:
        type: string
        description: "Specify branch for deployment"
        default: ""
    secrets:
      DEPLOYMENT_PRIVATE_KEY:
        description: Provide private key if deployment uses encrypted config

jobs:
  build_web:
    uses: ./.github/workflows/reusable-app-build.yml
    with:
      branch: ${{ inputs.branch }}
      post-build-cmd: npx cap sync ios
      additional-artifact: ios
    secrets: inherit

  debug:
    runs-on: ubuntu-latest
    needs: build_web
    steps:
      - name: Download IOS artifact
        uses: actions/download-artifact@v4
        with:
          name: ios
      - name: Extract Build folder
        run: |
          mkdir ios
          tar -xf artifact.tar --directory ios
          ls
          ls ios
          ls ios/App

        # TODO - google plist
      #   - name: Populate google-services.json
      #     env:
      #       GOOGLE_SERVICES_JSON: ${{ env.GOOGLE_SERVICES_JSON }}
      #     run: echo $GOOGLE_SERVICES_JSON > android/app/google-services.json

      #############################################################################
      # IOS Setup - Signing certificates and provisioning profile
      # https://docs.github.com/en/actions/use-cases-and-examples/deploying/installing-an-apple-certificate-on-macos-runners-for-xcode-development
      #
      # base64 -i BUILD_CERTIFICATE.p12 | pbcopy
      # base64 -i PROVISIONING_PROFILE.mobileprovision | pbcopy
      #############################################################################

    #   - name: Install the Apple certificate and provisioning profile
    #     env:
    #       BUILD_CERTIFICATE_BASE64: ${{ secrets.IOS_BUILD_CERTIFICATE_BASE64 }}
    #       P12_PASSWORD: ${{ secrets.IOS_P12_PASSWORD }}
    #       BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
    #       # keychain temporary and deleted after workflow run so doesn't need to be secure (could be added as secret)
    #       # if using self-hosted runner would need to manually ensure removed
    #       KEYCHAIN_PASSWORD: abcd1234
    #     run: |
    #       # create variables
    #       CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
    #       PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
    #       KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

    #       # import certificate and provisioning profile from secrets
    #       echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
    #       echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

    #       # create temporary keychain
    #       security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
    #       security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
    #       security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

    #       # import certificate to keychain
    #       security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
    #       security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
    #       security list-keychain -d user -s $KEYCHAIN_PATH

    #       # apply provisioning profile
    #       mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
    #       cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

    #############################################################################
    #         IOS Build
    #############################################################################

    #   - name: build archive
    #     run: |
    #       xcodebuild -scheme "App" \
    #       -archivePath $RUNNER_TEMP/App.xcarchive \
    #       -sdk iphoneos \
    #       -configuration Debug \
    #       -destination generic/platform=iOS \
    #       clean archive

    #   - name: export ipa
    #     env:
    #       EXPORT_OPTIONS_PLIST: ${{ secrets.EXPORT_OPTIONS_PLIST }}
    #     run: |
    #       EXPORT_OPTS_PATH=$RUNNER_TEMP/ExportOptions.plist
    #       echo -n "$EXPORT_OPTIONS_PLIST" | base64 --decode -o $EXPORT_OPTS_PATH
    #       xcodebuild -exportArchive -archivePath $RUNNER_TEMP/App.xcarchive -exportOptionsPlist $EXPORT_OPTS_PATH -exportPath $RUNNER_TEMP/build

    #   - name: Upload application
    #     uses: actions/upload-artifact@v3
    #     with:
    #       name: app
    #       path: ${{ runner.temp }}/build/app.ipa
    #       # you can also archive the entire directory
    #       # path: ${{ runner.temp }}/build
    #       retention-days: 3

    # TODO - support direct upload to testflight

    #   TODO - consider match vs certs
    #   TODO - PR notes, actions typically don't allow build without supplying creds for potential upload
    # TODO
    # TODO
    # TODO - Notes
    # - future fastlane options (e.g. screenshots, migrate android)
    # - IDEMS specific provisioning profiles (personal migrate notes in https://www.andrewhoog.com/post/how-to-build-an-ios-app-with-github-actions-2023/)
    # - match vs keys... seems like match with github requires additional user account on github account to avoid personal access tokens (cf service)
    #   probably google cloud a better option, future recommendation (although to be clear what fastlane features are supported vs aren't when using gcs)
    # - Existing actions vs custom - probably lean towards custom fastlane files adapted from existing actions (more flexibility, e.g. screenshots, appetize build)
    # - Fastlane vs raw... Probably opt for fastlane, should also be possible to test locally a bit better
    # - https://docs.fastlane.tools/actions/match/
    #

    # - uses: yukiarrr/ios-build-action@v1.12.0
    #   with:
    #     project-path: ios/App/App.xcodeproj
    #     code-signing-identity: ${{ env.IOS_CODE_SIGNING_IDENTITY }}
    #     team-id: ${{ env.IOS_TEAM_ID }}
    #     mobileprovision-base64: ${{ env.IOS_MOBILEPROVISION_BASE64 }}
    #     p12-base64: ${{ env.IOS_P12_BASE64 }}
    #     app-store-connect-api-key-base64: ${{...}}
    #     app-store-connect-api-key-id: ${{...}}
    #     app-store-connect-api-key-issuer-id:

    # Better - v1 started as fork (with p12), v2 uses match

    # TODO - is it possible to at least build without profiles...?
    # https://github.com/sparkfabrik/ios-build-action
    # https://github.com/sparkfabrik/ios-build-action/tree/v1.2.0

    # - uses: sparkfabrik/ios-build-action@v2.3.0
    # with:
    #   project-path: ios/App/App.xcodeproj
    #   workspace-path: ios/APP/App.xcworkspace
    #   configuration: Release
    #   team-id: ${{ env.IOS_TEAM_ID }}
    #   team-name: ${{  }}
    #   upload-to-testflight: true
