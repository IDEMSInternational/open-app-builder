##################################################################################
#         About
##################################################################################
# Reuseable workflow to be called from content repos.
# Build and deploy app bundle for ios
#
#         Version : 1.1
#
##################################################################################
#         Configuration
##################################################################################
env:
  # Required for build
  DEPLOYMENT_NAME: ${{vars.DEPLOYMENT_NAME}}
  DEPLOYMENT_PRIVATE_KEY: ${{secrets.DEPLOYMENT_PRIVATE_KEY}}
  APP_CODE_BRANCH: ${{vars.APP_CODE_BRANCH}}
  PARENT_DEPLOYMENT_REPO: ${{vars.PARENT_DEPLOYMENT_REPO}}
  PARENT_DEPLOYMENT_NAME: ${{vars.PARENT_DEPLOYMENT_NAME}}
  PARENT_DEPLOYMENT_BRANCH: ${{vars.PARENT_DEPLOYMENT_BRANCH}}

  GOOGLE_SERVICES_JSON: ${{secrets.GOOGLE_SERVICES_JSON}}
  GOOGLE_SERVICES_PLIST: ${{secrets.GOOGLE_SERVICES_PLIST}}

  # Required for this action
  APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
  APP_STORE_CONNECT_API_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}
  APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
  APP_STORE_TEAM_ID: ${{ vars.APP_STORE_TEAM_ID }}
  GCP_IOS_CERTS_SERVICE_ACCOUNT_KEY: ${{secrets.GCP_IOS_CERTS_SERVICE_ACCOUNT_KEY}}
  GCP_IOS_CERTS_BUCKET_ID: ${{ vars.GCP_IOS_CERTS_BUCKET_ID }}
  GCP_IOS_CERTS_ENCRYPTION_PASSWORD: ${{ secrets.GCP_IOS_CERTS_ENCRYPTION_PASSWORD }}
  GCP_IOS_CERTS_PROJECT_ID: ${{ vars.GCP_IOS_CERTS_PROJECT_ID }}

  # Optional (if deploying to appetize)
  APPETIZE_TOKEN: ${{secrets.APPETIZE_TOKEN}}

  ##################################################################################
  #         Main Code
  ##################################################################################
name:
  IOS Release

  # Only keep one active build per ref (e.g. pr branch, push branch, triggering workflow ref)
concurrency:
  group: ios-release-${{ github.workflow }}-${{ github.ref }}-${{ inputs.target }}
  cancel-in-progress: true

on:
  workflow_call:
    inputs:
      branch:
        type: string
        description: "Specify branch for deployment"
        default: ""
      target:
        type: string
        description: testflight / appetize
        default: testflight
    secrets:
      DEPLOYMENT_PRIVATE_KEY:
        description: Provide private key if deployment uses encrypted config

jobs:
  # Ensure all required secrets are populated
  validate_env:
    runs-on: ubuntu-latest
    steps:
      - name: Validate required secrets
        run: |
          set -euo pipefail
          for var in APP_STORE_CONNECT_API_KEY_ID APP_STORE_CONNECT_API_ISSUER_ID APP_STORE_CONNECT_API_KEY GCP_IOS_CERTS_ENCRYPTION_PASSWORD GCP_IOS_CERTS_SERVICE_ACCOUNT_KEY; do
            if [ -z "$(printenv "$var")" ]; then
              echo "❌ Missing required secret: $var"
              exit 1
            else
              echo "✅ $var is set"
            fi
          done
      - name: Validate required variables
        run: |
          set -euo pipefail
          for var in APP_STORE_TEAM_ID GCP_IOS_CERTS_BUCKET_ID GCP_IOS_CERTS_PROJECT_ID; do
            if [ -z "${!var}" ]; then
              echo "❌ Missing required variable: $var"
              exit 1
            else
              echo "✅ $var is set"
            fi
          done
      - name: Validate release target
        run: |
          case "${{ inputs.target }}" in
            testflight|appetize) echo "✅ Valid target: ${{ inputs.target }}" ;;
            *) echo "❌ Invalid target: ${{ inputs.target }}"; exit 1 ;;
          esac
  #############################################################################
  #         Build Deployment Web
  #############################################################################

  build_web:
    uses: ./.github/workflows/reusable-app-build.yml
    needs: validate_env
    with:
      branch: ${{ inputs.branch }}
      post-build-cmd: |
        echo $GOOGLE_SERVICES_PLIST > ios/App/App/GoogleService-Info.plist
        yarn workflow ios configure
        npx cap sync ios
      # Upload ios directory as it includes configured template files and www content
      additional-artifact: ios
      # Ensure build also run on macos to allow npx cap sync to configure ios pods
      workflow-runner: macos-latest
    secrets: inherit

  #############################################################################
  #         Build IOS
  #############################################################################

  build_ios:
    runs-on: macos-latest
    needs: build_web
    steps:
      # Checkout builder repo and install node_modules so that they can be used in ios build
      # (e.g. capacitor plugins store podfiles in node_modules)
      - uses: actions/checkout@v4
        with:
          repository: "IDEMSInternational/open-app-builder.git"
          ref: ${{env.APP_CODE_BRANCH}}

      - name: Download IOS artifact
        uses: actions/download-artifact@v4
        with:
          name: ios
          # DEBUG - uncomment lines below and update `needs` for all jobs to skip build step
          # and use the output from a previous run for quicker debugging. Requires github-token
          # https://github.com/actions/download-artifact/issues/320

          # github-token: ${{ github.token }}
          # run-id: 17479046870

      # Remove default ios folder and replace with artifact generated
      - name: Setup IOS folder
        run: |
          rm -R ios/*
          tar -xf artifact.tar --directory ios
          echo $GOOGLE_SERVICES_PLIST > ios/App/App/GoogleService-Info.plist

      # Setup ruby. Use bundler-cache to auto-install Gemfile in working directory
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.0"
          bundler-cache: true
          working-directory: ios/App

      # Install node_module dependencies (includes capacitor plugin pods required for build)
      - uses: actions/setup-node@v4
        with:
          node-version: 20.17.0
          cache: yarn
      - run: yarn workspaces focus frontend --production

      # Setup certs, build and upload to testflight
      - name: Build IOS and Release
        working-directory: ios/App
        # Call workflow from generated fastfile
        run: |
          bundle exec pod install --repo-update
          bundle exec fastlane release_${{ inputs.target }}

      # Upload logs if the job fails
      - name: Upload Xcode build logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: xcode-build-logs
          path: ~/Library/Logs/gym
