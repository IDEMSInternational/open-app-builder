@use "sass:color";
@use "sass:map";
@use "sass:math";
@use "./contrast-colour.scss";

@function wrap-hue($angle) {
  @return $angle % 360;
}

// Returns a map of colours based partly on Material Design's colour system
// https://material.io/design/color/the-color-system.html
@function getColorPalette(
  $primary,
  $secondary,
  $page-background: null,
  $weights: (50, 100, 200, 300, 400, 500, 600, 700, 800, 900),
  $green: null,
  $red: null,
  $yellow: hsl(45, 100%, 50%),
  $gray: hsl(0, 0%, 10%),
  $primary-alt: null,
  $secondary-alt: null
) {
  // Alternative values derived from HSL transformations, following the analogous colour harmony
  @if ($primary-alt == null) {
    $primary-alt: hsl(
      wrap-hue(hue($primary) + 20),
      saturation($primary) - 12,
      lightness($primary) + 10
    );
  }

  @if ($secondary-alt == null) {
    $secondary-alt: hsl(
      wrap-hue(hue($secondary) - 23),
      saturation($secondary) + 16,
      lightness($secondary) + 5
    );
  }

  $result: (
    "color-primary": $primary,
    "color-primary-alt": $primary-alt,
    "color-primary-contrast": contrast-colour.choose-contrast-color($primary),
    "color-secondary": $secondary,
    "color-secondary-alt": $secondary-alt,
    "color-secondary-contrast": contrast-colour.choose-contrast-color($secondary),
    "background-color": color.change($primary, $lightness: 98%),
    "color-yellow": $yellow,
    "color-red": hsl(0, 100%, 50%),
    "color-green": hsl(120, 100%, 35%),
    "color-gray-light": color.change($gray, $lightness: 90%),
    "default-box-shadow": 0 2px 8px rgba(0, 0, 0, 0.2),
    // Used for activated/focused/hover states of ion-button – may only be visible in web preview
    // TODO: Remove when migrating away from ionic
    "color-primary-shade": color.adjust($primary, $lightness: -15%),
    "color-primary-tint": color.adjust($primary, $lightness: 50%),
  );

  // Generate variants of base colours based on given weights and add to map
  // E.g. '"color-primary-400": color.change($primary, $lightness: 60%)'
  $result: map.merge($result, generateColourVariants($primary, "primary", $weights));
  $result: map.merge($result, generateColourVariants($secondary, "secondary", $weights));
  $result: map.merge($result, generateColourVariants($yellow, "yellow", $weights));
  $result: map.merge($result, generateColourVariants($gray, "gray", $weights));
  $result: map.merge($result, generateColourVariants($primary-alt, "primary-alt", $weights));
  $result: map.merge($result, generateColourVariants($secondary-alt, "secondary-alt", $weights));

  // Handle default values for optional params
  @if ($page-background != null) {
    $result: map.set($result, "background-color", $page-background);
  }
  @if ($green != null) {
    $result: map.set($result, "color-green", $green);
  }
  @if ($red != null) {
    $result: map.set($result, "color-red", $red);
  }
  @return $result;
}

@function generateColourVariants($base, $baseName, $weights) {
  $variants-map: ();
  $lightness-map: (
    50: 96%,
    100: 90%,
    200: 80%,
    300: 70%,
    400: 60%,
    500: 50%,
    600: 40%,
    700: 30%,
    800: 20%,
    900: 10%,
  );
  @each $weight in $weights {
    $lightness: map.get($lightness-map, $weight);
    $color: hsl(hue($base), saturation($base), $lightness);
    $map: (color-#{$baseName}-#{$weight}: $color);
    $variants-map: map.merge($variants-map, $map);
  }
  $transparent: (color-#{$baseName}-transparent: rgba($base, 0.5));
  @return $variants-map;
}

@function generateColourVariants($base, $baseName, $weights) {
  $variants-map: ();

  // Extract base HSL values
  $base-h: color.hue($base);
  $base-s: color.saturation($base);
  $base-l: color.lightness($base);

  // As lightness decreases, colours significantly lose vibrancy therefore scale stops are varied between 8% and 10%.
  $lightness-scale: (
    50: 96%,
    100: 88%,
    200: 78%,
    300: 70%,
    400: 58%,
    500: 48%,
    600: 40%,
    700: 32%,
    800: 24%,
    900: 16%,
  );

  @each $weight in $weights {
    $new-l: map.get($lightness-scale, $weight);

    // Increase saturation gradually for darker shades (weight ≥ 400)
    $darkness-factor: math.div($weight, 900); // 50 -> 0.05, 900 -> 1
    $saturation-boost: 15% * $darkness-factor; // boost by ~1.5
    $new-s: $base-s + $saturation-boost;

    @if $new-s > 100% {
      $new-s: 100%;
    }

    $new-color: hsl($base-h, $new-s, $new-l);

    $variants-map: map.merge($variants-map, (color-#{$baseName}-#{$weight}: $new-color));
  }

  $variants-map: map.merge($variants-map, (color-#{$baseName}-transparent: rgba($base, 0.5)));

  @return $variants-map;
}

@function getGradientPalette($colorPalette) {
  $baseColors: primary, secondary;
  $gradientDirections: (
    vertical: 175deg,
    horizontal: 85deg,
  );
  $gradientPalette: ();

  @each $baseColor in $baseColors {
    $base: "color-#{$baseColor}";
    $light: map.get($colorPalette, "#{$base}-200");
    $mid: map.get($colorPalette, "#{$base}-500");
    $dark: map.get($colorPalette, "#{$base}-800");
    $main: map.get($colorPalette, $base);

    @each $dirName, $dirAngle in $gradientDirections {
      $gradientPalette: map.merge(
        $gradientPalette,
        (
          "gradient-#{$baseColor}-#{$dirName}":
            linear-gradient(
              $dirAngle,
              color.adjust($main, $lightness: 12%) 30%,
              color.adjust($main, $lightness: -12%)
            ),
          // Light gradient: 200 → 500
          "gradient-#{$baseColor}-light-#{$dirName}":
            linear-gradient($dirAngle, $light 30%, $mid),
          // Mid gradient: 400 → 700
          "gradient-#{$baseColor}-mid-#{$dirName}":
            linear-gradient(
              $dirAngle,
              map.get($colorPalette, "color-#{$baseColor}-400") 30%,
              map.get($colorPalette, "color-#{$baseColor}-700")
            ),
          // Dark gradient: 700 → 900
          "gradient-#{$baseColor}-dark-#{$dirName}":
            linear-gradient(
              $dirAngle,
              map.get($colorPalette, "color-#{$baseColor}-700") 30%,
              map.get($colorPalette, "color-#{$baseColor}-900")
            ),
        )
      );
    }
  }

  @return $gradientPalette;
}

@mixin generateTheme($p, $s, $bg: null, $r: null, $g: null, $pa: null, $sa: null) {
  $colorPalette: getColorPalette(
    $p,
    $s,
    $bg,
    $red: $r,
    $green: $g,
    $primary-alt: $pa,
    $secondary-alt: $sa
  );
  $gradientPalette: getGradientPalette($colorPalette);
  @include colorVariables($colorPalette, $gradientPalette);
}

@mixin colorVariables($sourceColorPalette, $sourceGradientPalette) {
  $colorPalette: $sourceColorPalette;
  $gradientPalette: $sourceGradientPalette;

  @each $label, $color in $colorPalette {
    --ion-#{$label}: #{$color};
  }
  @each $label, $color in $gradientPalette {
    --#{$label}: #{$color};
  }

  --ion-item-background: #{map.get($colorPalette, "color-primary-50")};

  // BORDERS
  --border-standard: 1px solid #{map.get($colorPalette, "color-primary")};
  --border-thin-standard: 0.5px solid #{map.get($colorPalette, "color-primary")};

  //  GRADIENTS
  //Gradient direction
  $vertical: 180deg;
  $horizontal: 90deg;
}
