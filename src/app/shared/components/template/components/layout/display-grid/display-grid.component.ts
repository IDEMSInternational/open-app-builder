import { ChangeDetectionStrategy, Component, computed } from "@angular/core";
import { TemplateBaseComponent } from "../../base";
import { ITemplateRowProps } from "../../../models";
import { toObservable, toSignal } from "@angular/core/rxjs-interop";
import { map, switchMap, filter } from "rxjs";
import { DataItemsService } from "../../data-items/data-items.service";

interface IDisplayGridParams {
  /**
   * Item border outline style.
   * Default: "solid"
   */
  item_border?: "solid" | "dashed" | "none";

  /**
   * Minimum item width, will increase to fit grid.
   * Default '200px'
   **/
  item_width: string;
  /**
   * Maximum grid width, if specified will center items in available space.
   * Default '100%'
   **/
  grid_width: string;
  /**
   * Spacing between grid items.
   * Default '16px'
   **/
  grid_gap: string;
}

@Component({
  selector: "plh-display-grid",
  templateUrl: "./display-grid.component.html",
  styleUrls: ["./display-grid.component.scss"],
  changeDetection: ChangeDetectionStrategy.OnPush,
  standalone: false,
})
export class TmplDisplayGridComponent extends TemplateBaseComponent implements ITemplateRowProps {
  // HACK - render rows either from default child begin_items loop, or generated by data_items loop
  public gridRows = computed(() => {
    return this.dataItemRows() || this.rows();
  });

  /** Computed grid style from input parameters */
  public gridStyle = computed(() => this.generateGridStyle(this.parameterList()));

  /** Computed item style from input parameters */
  public itemStyle = computed(() => this.generateItemStyles(this.parameterList()));

  // HACK - if using data_items then render child rows nested within the main data_items row
  private dataItemRows = toSignal(
    toObservable(this.rows).pipe(
      map((rows) => rows.find((r) => r.type === "data_items")),
      filter((row) => row !== undefined),
      switchMap((row) => this.dataItemsService.getItemsObservable(row, this.parent.templateRowMap))
    )
  );

  constructor(private dataItemsService: DataItemsService) {
    super();
  }

  /**
   * Create a list of styles to be passed into ngStyle for grid and item components
   * https://thesoftwayfarecoder.com/dynamically-creating-css-classes-in-angular/
   */
  private generateGridStyle(parameterList: IDisplayGridParams) {
    const minItemWidth = parameterList.item_width || "200px";
    const maxGridWidth = parameterList.grid_width || "100%";
    const gridGap = parameterList.grid_gap || "16px";

    const gridStyle: Partial<CSSStyleDeclaration> = {
      // center grid with maximum width
      maxWidth: maxGridWidth,
      margin: "auto",
      // apply fixed gap between grid items
      gap: gridGap,
      // fit columns with target item width
      gridTemplateColumns: `repeat(auto-fit, minmax(${minItemWidth}, 1fr))`,
      // make all rows same height
      gridAutoRows: "1fr",
    };

    return gridStyle;
  }

  private generateItemStyles(parameterList: IDisplayGridParams) {
    const borderStyle = parameterList.item_border || "solid";
    const itemStyle: Partial<CSSStyleDeclaration> = {
      // assign item border outline style
      borderStyle,
    };
    return itemStyle;
  }
}
