import { Component, computed, effect, signal, Signal } from "@angular/core";
import { TemplateBaseComponent } from "../base";
import { getStringParamFromTemplateRow } from "src/app/shared/utils";
import { TemplateTranslateService } from "../../services/template-translate.service";
import { toObservable, toSignal } from "@angular/core/rxjs-interop";
import { filter, map, switchMap } from "rxjs";
import { DataItemsService } from "../data-items/data-items.service";
import { FlowTypes } from "packages/data-models";

interface IProgressPathParams {
  /** TEMPLATE_PARAMETER: "variant". Default "wavy" */
  variant: "basic" | "wavy" | "curved";
}

// HACK - hardcoded sizing values to make content fit reasonably well
const SIZING = {
  /** Total width for container */
  widthPx: 364,
  /** Target height for text content */
  textContentHeight: 82,
  /** Adjust x for task card overlap */
  xOffset: 56,
  /** Adjust y for task card overlap */
  yOffset: 56,
};

@Component({
  selector: "plh-progress-path",
  templateUrl: "./progress-path.component.html",
  styleUrls: ["./progress-path.component.scss"],
})
export class TmplProgressPathComponent extends TemplateBaseComponent {
  public params: Signal<IProgressPathParams> = computed(() => {
    console.log("parameterList", this.parameterList());
    return this.getParams(this.parameterList());
  });

  public svgPath = signal<string>("");
  public svgViewBox = signal<string>("");
  public contentHeight = signal<string>("");
  public width = `${SIZING.widthPx}px`;

  constructor(
    public templateTranslateService: TemplateTranslateService,
    private dataItemsService: DataItemsService
  ) {
    super();
    effect(
      () => {
        this.generateSVGPath(this.params().variant);
      },
      { allowSignalWrites: true }
    );
  }

  private getParams(authorParams?: FlowTypes.TemplateRow["parameter_list"]): IProgressPathParams {
    return {
      variant: getStringParamFromTemplateRow(this._row, "variant", "wavy")
        .split(",")
        .join(" ") as IProgressPathParams["variant"],
    };
  }

  // HACK - render child rows either from default child begin_items loop, or generated by data_items loop
  public progressRows = computed(() => {
    return this.dataItemRows() || this.rows();
  });

  // HACK - if using data_items then render child rows nested within the main data_items row
  private dataItemRows = toSignal(
    toObservable(this.rows).pipe(
      map((rows) => rows.find((r) => r.type === "data_items")),
      filter((row) => row !== undefined),
      switchMap((row) => this.dataItemsService.getItemsObservable(row, this.parent.templateRowMap))
    )
  );

  /**
   * Generate a base SVG segment used to connect 2 progress items together
   * Roughly a horizontal line and smooth bend, adjusted for sizing
   */
  private generateSVGPath(variant: "basic" | "curved" | "wavy" = "wavy") {
    // arbitrary values used to make base width/height fit
    const { widthPx, xOffset, yOffset, textContentHeight } = SIZING;

    // adjust viewbox to include both title content and 100px card (+overlap)
    const viewboxHeight = textContentHeight + 128;

    // SVG Generation (https://www.aleksandrhovhannisyan.com/blog/svg-tutorial/)

    // M - start point (allow space for stroke width and content offset)
    // h - horizontal line, relative length
    // c - bezier curve (64 unit rounded)
    // v - vertical line, relative length

    // Basic generation, smooth
    // https://svg-path-visualizer.netlify.app/#M%20128%2C128%0Ah%20384%20%0Ac%2064%2C0%2064%2C64%2064%2C64%0Av%20352
    const basic = () =>
      `
    M ${xOffset},${yOffset}
    h ${widthPx - 2 * xOffset - 32}
    c 32,0 32,32 32,32
    v ${viewboxHeight - yOffset - 32}
    `.trim();

    // Alt generation that is a bit more wavy
    // https://svg-path-visualizer.netlify.app/#M%2064%2C56%0Ah%20208%0Ac%2048%2C0%2072%2C64%2048%2C128%0A
    const wavy = () =>
      `
    M ${xOffset},${yOffset}
    h ${widthPx - 2 * xOffset - 48}
    c 48,0 72,64 48,${viewboxHeight - yOffset - 4}
    `.trim();

    const curved = () =>
      `
    M ${xOffset},${yOffset}
    c 0,140 280,-80 252,160
    v 80
    `.trim();

    switch (variant) {
      case "basic":
        this.svgPath.set(basic());
        break;
      case "curved":
        this.svgPath.set(curved());
        break;
      default:
        this.svgPath.set(wavy());
    }
    this.svgViewBox.set(`0 0 ${widthPx} ${viewboxHeight}`);
    this.contentHeight.set(`${textContentHeight}px`);
  }
}
