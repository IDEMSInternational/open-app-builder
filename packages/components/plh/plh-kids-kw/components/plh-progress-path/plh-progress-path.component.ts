import { AfterViewInit, Component, computed, ElementRef, OnInit, ViewChild } from "@angular/core";
import { toObservable, toSignal } from "@angular/core/rxjs-interop";
import { filter, map, switchMap } from "rxjs";
import { TemplateBaseComponent } from "src/app/shared/components/template/components/base";
import { DataItemsService } from "src/app/shared/components/template/components/data-items/data-items.service";
import { TemplateTranslateService } from "src/app/shared/components/template/services/template-translate.service";
import {
  getIonContentHeight,
  setIonContentScrollTop,
} from "src/app/shared/components/template/utils";
import { getStringParamFromTemplateRow } from "src/app/shared/utils";

interface IPlhProgressPathParams {
  /** TEMPLATE_PARAMETER: "background_image_asset". Used to set the progress path background */
  backgroundImageAsset: string;
}

@Component({
  selector: "plh-plh-progress-path",
  templateUrl: "./plh-progress-path.component.html",
  styleUrls: ["./plh-progress-path.component.scss"],
})
export class PlhProgressPathComponent
  extends TemplateBaseComponent
  implements OnInit, AfterViewInit
{
  public loading = true;
  public svgPath: string;
  public svgViewBox: string;
  public width = `420px`;
  params: Partial<IPlhProgressPathParams> = {};
  @ViewChild("progressPath", { static: false }) progressPath!: ElementRef;

  // HACK - render child rows either from default child begin_items loop, or generated by data_items loop
  public progressRows = computed(() => {
    return this.dataItemRows() || this.rows();
  });

  // HACK - if using data_items then render child rows nested within the main data_items row
  private dataItemRows = toSignal(
    toObservable(this.rows).pipe(
      map((rows) => rows.find((r) => r.type === "data_items")),
      filter((row) => row !== undefined),
      switchMap((row) => this.dataItemsService.getItemsObservable(row, this.parent.templateRowMap))
    )
  );

  constructor(
    public templateTranslateService: TemplateTranslateService,
    private dataItemsService: DataItemsService
  ) {
    super();
  }

  ngOnInit() {
    this.generateSVGPath();
    this.getParams();
  }

  ngAfterViewInit() {
    setTimeout(() => this.scrollToBottomMiddle(), 100);
    this.loading = false;
  }

  // Scroll to the bottom and horizontally to the middle of the component
  private scrollToBottomMiddle() {
    const element = this.progressPath.nativeElement;

    // Scroll component content horizontally to centre component content
    const scrollLeft = (element.scrollWidth - window.innerWidth) / 2;
    element.scrollTo({
      left: scrollLeft,
    });

    // Scroll parent ion-content element to the bottom
    const height = getIonContentHeight(this.progressPath);
    setIonContentScrollTop(this.progressPath, height);
  }

  private getParams() {
    this.params.backgroundImageAsset = getStringParamFromTemplateRow(
      this._row,
      "background_image_asset",
      null
    );
  }

  private generateSVGPath() {
    const curvedPath = () =>
      `
    M 92,58
    c 80,110 290,-30 310,150
    c -10,40 -90,100 -248,46
    c -160,-54 -180,270 40,204
    c 90,-36 140,0 210,80
    c -6,12 -40,50 -160,96
    v 0
    `.trim();

    this.svgPath = curvedPath();
    this.svgViewBox = `0 0 450 700`;
  }
}
